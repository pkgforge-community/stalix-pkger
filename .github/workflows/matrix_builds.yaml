name: 🧰🛠️ Build Package 📦📀

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:

      pkg-name:
        description: "Name of the Package [Full Name] (Example: bin/wget)"
        required: true

      host:
        description: Host (Arch+OS) [ALL ==> Run on All Hosts]
        type: choice
        options:
          - "ALL"
          - "aarch64-Linux"
          - "x86_64-Linux"

      debug:
        description: Debug Mode (Verbose with set -x) [Default ==> False]
        type: choice
        options:
          - "false"
          - "true"

      github-release:
        description: Publish as Github Release? (Autogenerated Tag) [Default ==> True]
        type: choice
        options:
          - "true"
          - "false"

jobs:
  preprocess:
    runs-on: ubuntu-latest
    outputs:
      runner_matrix: ${{ steps.generate-matrix.outputs.runner_matrix }}
    steps:
      - name: Presetup
        id: generate-matrix
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          echo '[' > "./MATRIX.json.tmp"
           if [[ "${{ github.event.inputs.host }}" == "ALL" ]]; then
             echo '{"host": "aarch64-Linux", "runner": "ubuntu-24.04-arm", "pkg-name": "${{ inputs.pkg-name }}"},' >> "./MATRIX.json.tmp"
             echo '{"host": "x86_64-Linux", "runner": "ubuntu-latest", "pkg-name": "${{ inputs.pkg-name }}"}' >> "./MATRIX.json.tmp"
           elif [[ "${{ github.event.inputs.host }}" == "aarch64-Linux" ]]; then
             echo '{"host": "aarch64-Linux", "runner": "ubuntu-24.04-arm", "pkg-name": "${{ inputs.pkg-name }}"}' >> "./MATRIX.json.tmp"
           elif [[ "${{ github.event.inputs.host }}" == "x86_64-Linux" ]]; then
             echo '{"host": "x86_64-Linux", "runner": "ubuntu-latest", "pkg-name": "${{ inputs.pkg-name }}"}' >> "./MATRIX.json.tmp"
           fi
          echo ']' >> "./MATRIX.json.tmp"
          jq 'unique_by(.runner)' "./MATRIX.json.tmp" | jq . > "./MATRIX.json"
          ESCAPED_MATRIX="$(cat "./MATRIX.json" | jq -c .)"
          echo "runner_matrix=${ESCAPED_MATRIX}" >> "${GITHUB_OUTPUT}"
        continue-on-error: false

      - name: Sanity Check Input JSON
        run: |
          echo '${{ steps.generate-matrix.outputs.runner_matrix }}' | jq .
        continue-on-error: true

  build:
    needs: [preprocess]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.preprocess.outputs.runner_matrix) }}
    name: "${{ matrix.package.host }} ==> (${{ matrix.package.pkg-name }})"
    runs-on: "${{ matrix.package.runner }}"
    timeout-minutes: 90
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - name: Exit if not called
        env:
          GH_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          if [[ "$(uname -m | tr -d '[:space:]')" == "aarch64" ]]; then
            if [[ "${{ github.event.inputs.host }}" != "ALL" ]] && [[ "${{ github.event.inputs.host }}" != "aarch64-Linux" ]]; then
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            fi
          elif [[ "$(uname -m | tr -d '[:space:]')" == "x86_64" ]]; then
            if [[ "${{ github.event.inputs.host }}" != "ALL" ]] && [[ "${{ github.event.inputs.host }}" != "x86_64-Linux" ]]; then
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            fi
          fi
        continue-on-error: false

      - name: Parse Input [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          export HOST_TRIPLET="$(uname -m)-$(uname -s)"
          ##Debug
           if [[ "${{ github.event.inputs.debug }}" == "true" ]] ; then
             export DEBUG="1"
           else
             export DEBUG="0"
           fi
           echo "DEBUG=${DEBUG}" >> "${GITHUB_ENV}"
          ##Release
           if [[ "${{ github.event.inputs.github-release }}" == "false" ]] ; then
             export GITHUB_RELEASE="NO"
           else
             export GITHUB_RELEASE="YES"
             export GITHUB_TEST_BUILD="YES"
           fi
           echo "GITHUB_RELEASE=${GITHUB_RELEASE}" >> "${GITHUB_ENV}"
           echo "GITHUB_TEST_BUILD=${GITHUB_TEST_BUILD}" >> "${GITHUB_ENV}"
           ##Package
           SI_PKG_NAME="$(echo "${{ github.event.inputs.pkg-name }}" | tr -d '[:space:]')"
           PKG_SCRIPT_URL="https://github.com/pg83/ix/raw/main/pkgs/${SI_PKG_NAME}/ix.sh"
           pushd "$(mktemp -d)" &>/dev/null
             PKG_STATUS="$(curl -X "HEAD" -qfsSL "${PKG_SCRIPT_URL}" -I | sed -n 's/^[[:space:]]*HTTP\/[0-9.]*[[:space:]]\+\([0-9]\+\).*/\1/p' | tail -n1 | tr -d '[:space:]')"
             if echo "${PKG_STATUS}" | grep -qiv '200$'; then
               echo -e "\n[✗] FATAL: Failed to Fetch ${SI_PKG_NAME} <== ${PKG_SCRIPT_URL}\n"
               echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
              exit 1
             else
               SI_REALM_OUT="$(date --utc '+%Y%m%dT%H%M%S')"
               SI_PKG_NAME_SAFE="$(echo "${SI_PKG_NAME}" | sed 's/[^a-zA-Z0-9_]/_/g' | tr -d '[:space:]')"
               GITHUB_RELEASE_TAG="${SI_PKG_NAME_SAFE}-${SI_REALM_OUT}-${HOST_TRIPLET}"
               export GITHUB_RELEASE_TAG SI_PKG_NAME SI_PKG_NAME_SAFE SI_REALM_OUT
               echo "SI_PKG_NAME=${SI_PKG_NAME}" >> "${GITHUB_ENV}"
               echo "SI_PKG_NAME_SAFE=${SI_PKG_NAME_SAFE}" >> "${GITHUB_ENV}"
               echo "SI_REALM_OUT=${SI_REALM_OUT}" >> "${GITHUB_ENV}"
               echo "GITHUB_RELEASE_TAG=${GITHUB_RELEASE_TAG}" >> "${GITHUB_ENV}"
             fi
           popd &>/dev/null
           echo -e "\n==> ${PKG_SCRIPT_URL}\n"
        continue-on-error: false

      - name: Setup Env [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##CoreUtils
          export DEBIAN_FRONTEND="noninteractive"
          echo "DEBIAN_FRONTEND=${DEBIAN_FRONTEND}" >> "${GITHUB_ENV}"
          sudo apt update -y -qq
          #https://github.com/ilikenwf/apt-fast?tab=readme-ov-file#quick-install
          bash -c "$(curl -qfsSL 'https://raw.githubusercontent.com/ilikenwf/apt-fast/master/quick-install.sh')"
          sudo apt-fast install apt-transport-https apt-utils bc ca-certificates coreutils curl dos2unix fdupes git-lfs gnupg2 \
          jq moreutils p7zip-full rename rsync software-properties-common tar texinfo tmux tree util-linux wget zsync -y -qq 2>/dev/null
          sudo apt-fast update -y -qq 2>/dev/null
          ##tmp
          SYSTMP="$(dirname $(mktemp -u))" && export SYSTMP="${SYSTMP}"
          #GH ENV
          echo "SYSTMP=${SYSTMP}" >> "${GITHUB_ENV}"
          echo "GHA_MODE=MATRIX" >> "${GITHUB_ENV}"
          echo "GIT_TERMINAL_PROMPT=0" >> "${GITHUB_ENV}"
          echo "GIT_ASKPASS=/bin/echo" >> "${GITHUB_ENV}"
          ##Wget
          echo 'progress = dot:giga' | sudo tee -a "/etc/wgetrc"
          echo 'progress = dot:giga' | tee -a "${HOME}/.wgetrc"
        continue-on-error: true

      - name: BUILD (${{ github.event.inputs.pkg-name }}) [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Main
          pushd "$(mktemp -d)" &>/dev/null && C_WD="$(realpath .)"
           mkdir -pv "${C_WD}/tmp" &&\
           docker run --privileged --net="host" --name "alpine-builder" --pull="always" -e "DEBUG=${DEBUG}" \
             -e "SI_PKG_NAME=${SI_PKG_NAME}" -e "SI_PKG_NAME_SAFE=${SI_PKG_NAME_SAFE}" -e "SI_REALM_OUT=${SI_REALM_OUT}" \
             --volume "${C_WD}/tmp:/tmp:rw" "ghcr.io/pkgforge/devscripts/alpine-ix:$(uname -m)" bash -l -c \
             '
              #Debug?
               if [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG}" = "ON" ]]; then
                 set -x
               fi
              #Setup ENV
               mkdir -pv "/SI_OUT" && pushd "$(mktemp -d)" &>/dev/null
              #Setup Stalix 
               hash -r &>/dev/null
               command -v ix || exit 1
               if [[ -d "${HOME}/ix/.git" ]]; then
                  git -C "${HOME}/ix/" reset --hard
                  git -C "${HOME}/ix/" fetch --all
                  git -C "${HOME}/ix/" reset --hard "origin/$(git -C "${HOME}/ix/" rev-parse --abbrev-ref HEAD)"
               else
                  echo -e "\n [X] FATAL: IX Not Found\n"
                 exit 1
               fi
              #Build
               echo -e "\n[+] StalIX PKG: ${SI_PKG_NAME}\n"
               SI_BINDIR="/ix/realm/${SI_REALM_OUT}"
               if [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG}" = "ON" ]]; then
                  ix mut "${SI_REALM_OUT}" --materialize "${SI_PKG_NAME}" --setx
               else
                  ix mut "${SI_REALM_OUT}" --materialize "${SI_PKG_NAME}"
               fi
               tree "${SI_BINDIR}" || ls "${SI_BINDIR}" -lah
              #Check
               echo "${SI_BINDIR}" | grep -qi "realm" && [[ -d "${SI_BINDIR}" ]] || exit 1
               if [[ -d "${SI_BINDIR}" ]] && [[ "$(du -s "${SI_BINDIR}" | cut -f1)" -gt 10 ]]; then
                 tar --directory="${SI_BINDIR}" --preserve-permissions --create --file="${SI_PKG_NAME_SAFE}.tar" "."
                 if [[ -f "./${SI_PKG_NAME_SAFE}.tar" ]] && [[ $(stat -c%s "./${SI_PKG_NAME_SAFE}.tar") -gt 1024 ]]; then
                   mv -fv "./${SI_PKG_NAME_SAFE}.tar" "/SI_OUT/${SI_PKG_NAME_SAFE}.tar"
                 fi
               fi
             '
           docker cp "alpine-builder:/SI_OUT/." "${C_WD}/"
           rm -rvf "/tmp/ARTIFACTS" 2>/dev/null ; mkdir -pv "/tmp/ARTIFACTS"
           if [[ -s "${SI_PKG_NAME_SAFE}.tar" ]]; then
             cp -fv "${SI_PKG_NAME_SAFE}.tar" "/tmp/ARTIFACTS/${SI_PKG_NAME_SAFE}.tar"
           else
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           fi
           if [[ -f "/tmp/ARTIFACTS/${SI_PKG_NAME_SAFE}.tar" ]] && [[ $(stat -c%s "/tmp/ARTIFACTS/${SI_PKG_NAME_SAFE}.tar") -gt 1024 ]]; then
              export HAS_RELEASE="TRUE"
              echo "HAS_RELEASE=$HAS_RELEASE" >> "${GITHUB_ENV}"
           else
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
             exit 1
           fi
          popd &>/dev/null           
        continue-on-error: true

    ##Logs & Artifacts
      - name: Upload (LOG) Artifacts [${{ matrix.package.host }}<==>${{ matrix.package.runner }}] (${{ env.GITHUB_RELEASE_TAG }})
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/upload-artifact@v4
        with:
            name: "${{ env.GITHUB_RELEASE_TAG }}"
            path: |
              /tmp/ARTIFACTS/**
            compression-level: 0 # no compression, [Default: 6 (GNU Gzip)]
            retention-days: 30
            overwrite: true
        continue-on-error: true 

      - name: Attest Build Provenance [${{ matrix.package.host }}<==>${{ matrix.package.runner }}] (${{ env.GITHUB_RELEASE_TAG }})
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/attest-build-provenance@v2.3.0
        with:
          subject-name: "${{ env.GITHUB_RELEASE_TAG }}"
          subject-path: |
            /tmp/ARTIFACTS/**
          show-summary: true
        continue-on-error: true

      - name: Releaser
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: "Artifact (${{ eenv.SI_PKG_NAME}})"
          tag_name: "${{ env.GITHUB_RELEASE_TAG }}"
          prerelease: false
          draft: false
          generate_release_notes: false
          make_latest: false
          files: |
            /tmp/ARTIFACTS/**
        continue-on-error: true

      - name: Self-Kill
        if: always()
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          [[ -f "/tmp/GHA_CI_STATUS" && -w "/tmp/GHA_CI_STATUS" ]] && echo "" > "/tmp/GHA_CI_STATUS"
          if [[ -d "/tmp" && -w "/tmp" ]]; then
            echo "EXITED" | tee "/tmp/GHA_CI_STATUS"
          fi
        continue-on-error: true